generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  password    String
  avatar      String?
  phoneNumber String
  role        String
  level       String
  startDate   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UsersTokens UserTokens[]
  Attendance  Attendance[]

  Lodge       Lodge? @relation(fields: [fk_lodge_id], references: [id])
  fk_lodge_id String

  Address       Address? @relation(fields: [fk_address_id], references: [id])
  fk_address_id String?
}

model UserTokens {
  id            String   @id @default(uuid())
  refresh_token String
  expires_date  DateTime

  created_at DateTime @default(now())

  users      User   @relation(fields: [fk_user_id], references: [id])
  fk_user_id String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id      String   @id @default(uuid())
  date    DateTime
  present Boolean

  users      User   @relation(fields: [fk_user_id], references: [id])
  fk_user_id String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lodge {
  id          String @id @default(uuid())
  name        String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User     User[]
  Meetings Meeting[]
}

model Meeting {
  id          String   @id @default(uuid())
  date        DateTime
  description String

  lodge       Lodge  @relation(fields: [fk_lodge_id], references: [id])
  fk_lodge_id String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id           String  @id @default(uuid())
  zipCode      String
  street       String
  number       String
  city         String
  neighborhood String
  complement   String?

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
